module Rules.Data where

import DA.List as L
import DA.Either
import DA.Map as M
import DA.Text as T

import Types


type IntCoord = (Int, Int)

type StateMap = Map IntCoord Piece

type E = Either Text

type Capture = Optional IntCoord


-- | Turns a `Coord` into integer coordinates with x in [0-7]
toIntCoord : Coord -> IntCoord
toIntCoord c = (i / 8, i % 8)
  where i = fromEnum c

toCoord (col, row) = toEnum i
  where i = col * 8 + row


colD : IntCoord -> IntCoord -> Int
colD c1 c2 = abs(c1._1 - c2._1)

rowD : IntCoord -> IntCoord -> Int
rowD c1 c2 = abs(c1._2 - c2._2)


instance MapKey IntCoord where
  keyToText c = keyToText c._1 <> ";" <> keyToText c._2
  keyFromText t = case T.splitOn ";" t of
    [a, b] -> (keyFromText a, keyFromText b)
    _ -> error "malformatted key"


boardContains : Int -> Bool
boardContains n = L.elem n [0..7]


nbrCoords : Coord -> Int -> [IntCoord]
nbrCoords coord dist = do
  let crd = toIntCoord(coord)
      c = crd._1
      r = crd._2
      n = 1 * dist
  [(c - n, r - n), (c + n, r + n), (c - n, r + n), (c + n, r - n)]


-- | Takes a `GameState` and tries to turn it into a map from
-- | integer coordinates x in [0-7] and y in [0-7]. Fails if a
-- | field is double occupied.
mapState : GameState -> E StateMap
mapState s =
  foldl
    work
    (Right M.empty)
    s.pieces
  where
    work e p =
      case e of
        r@(Left _) -> r
        Right m -> do
          let pc = toIntCoord p.coord
          if member pc m
            then
              Left ("Double occupation on " <> show p)
            else
              Right (M.insert pc p m)


-- | Preprocessed move data to be used by other rule functions
data MoveData = MoveData with
  state : GameState
  stateMap : StateMap
  move : GameMove
  from : IntCoord
  to : IntCoord
  piece : Piece

-- | Function to pre-process move and game state
toMoveData : GameState -> GameMove -> E MoveData
toMoveData state move = do
  let from = toIntCoord move.from
      to = toIntCoord move.to
  stateMap <- mapState state
  piece <- optionalToEither "From position not occupied" $ M.lookup from stateMap
  assertMsg "Player doesn't own piece" (state.player == piece.owner)
  return $ MoveData with ..


initPieces : [Int] -> Player -> [Piece]
initPieces rs p = concatMap (\r -> do
  map (\c -> do
    let col = if r % 2 == 0 then c else c + 1
    Piece with
      coord = toCoord (col, r)
      tp = Pawn
      owner = p
    ) [0,2,4,6]
  ) rs

initState x =
  GameState with
    player = Red
    pieces = initRed ++ initBlack
    moves = []
  where  
    initRed = initPieces ([0,1,2])(Red)
    initBlack = initPieces ([5,6,7])(Black)
    